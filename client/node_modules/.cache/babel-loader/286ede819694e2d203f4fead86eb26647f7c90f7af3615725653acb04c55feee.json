{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/src/components/videoComponent.jsx\";\nimport React from 'react';\nimport clearSkyDay from '../videos/clear_sky_day.mp4';\n\n// A component that takes weather description and returns the appropriate video\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundVideo = ({\n  weatherCondition,\n  icon\n}) => {\n  // Mapping of weather conditions to videos\n  const weatherVideos = {\n    'clear sky day': clearSkyDay,\n    'clear sky night': clearSkyNight,\n    'cloudy day': cloudyDay,\n    'cloudy night': cloudyNight,\n    'rain': rain,\n    'snow': snow,\n    'thunderstorm': thunderstorm,\n    'mist': mist\n  };\n\n  // Determine if it's day or night based on the icon\n  const timeOfDay = icon.endsWith('d') ? 'day' : 'night';\n\n  // Create the key for matching with weatherVideos\n  let videoKey;\n  if (weatherCondition.includes('rain')) {\n    videoKey = 'rain';\n  } else if (weatherCondition.includes('snow')) {\n    videoKey = 'snow';\n  } else if (weatherCondition.includes('thunderstorm')) {\n    videoKey = 'thunderstorm';\n  } else if (weatherCondition.includes('mist')) {\n    videoKey = 'mist';\n  } else if (weatherCondition.includes('cloud')) {\n    videoKey = `${timeOfDay} night`; // Default to night for cloudy conditions\n  } else {\n    videoKey = `clear sky ${timeOfDay}`;\n  }\n\n  // Fetch the video or fallback to a default video\n  const videoUrl = weatherVideos[videoKey] || '../videos/default.mp4';\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    autoPlay: true,\n    loop: true,\n    muted: true,\n    className: \"background-video\",\n    children: [/*#__PURE__*/_jsxDEV(\"source\", {\n      src: videoUrl,\n      type: \"video/mp4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \"Your browser does not support the video tag.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = BackgroundVideo;\nexport default BackgroundVideo;\nvar _c;\n$RefreshReg$(_c, \"BackgroundVideo\");","map":{"version":3,"names":["React","clearSkyDay","jsxDEV","_jsxDEV","BackgroundVideo","weatherCondition","icon","weatherVideos","clearSkyNight","cloudyDay","cloudyNight","rain","snow","thunderstorm","mist","timeOfDay","endsWith","videoKey","includes","videoUrl","autoPlay","loop","muted","className","children","src","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/src/components/videoComponent.jsx"],"sourcesContent":["import React from 'react';\nimport clearSkyDay from '../videos/clear_sky_day.mp4';\n\n// A component that takes weather description and returns the appropriate video\nconst BackgroundVideo = ({ weatherCondition, icon }) => {\n  // Mapping of weather conditions to videos\n  const weatherVideos = {\n    'clear sky day': clearSkyDay,\n    'clear sky night': clearSkyNight,\n    'cloudy day': cloudyDay,\n    'cloudy night': cloudyNight,\n    'rain': rain,\n    'snow': snow,\n    'thunderstorm': thunderstorm,\n    'mist': mist,\n  };\n\n  // Determine if it's day or night based on the icon\n  const timeOfDay = icon.endsWith('d') ? 'day' : 'night';\n\n  // Create the key for matching with weatherVideos\n  let videoKey;\n  if (weatherCondition.includes('rain')) {\n    videoKey = 'rain';\n  } else if (weatherCondition.includes('snow')) {\n    videoKey = 'snow';\n  } else if (weatherCondition.includes('thunderstorm')) {\n    videoKey = 'thunderstorm';\n  } else if (weatherCondition.includes('mist')) {\n    videoKey = 'mist';\n  } else if (weatherCondition.includes('cloud')) {\n    videoKey = `${timeOfDay} night`; // Default to night for cloudy conditions\n  } else {\n    videoKey = `clear sky ${timeOfDay}`;\n  }\n\n  // Fetch the video or fallback to a default video\n  const videoUrl = weatherVideos[videoKey] || '../videos/default.mp4';\n\n  return (\n    <video autoPlay loop muted className=\"background-video\">\n      <source src={videoUrl} type=\"video/mp4\" />\n      Your browser does not support the video tag.\n    </video>\n  );\n};\n\nexport default BackgroundVideo;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,6BAA6B;;AAErD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGA,CAAC;EAAEC,gBAAgB;EAAEC;AAAK,CAAC,KAAK;EACtD;EACA,MAAMC,aAAa,GAAG;IACpB,eAAe,EAAEN,WAAW;IAC5B,iBAAiB,EAAEO,aAAa;IAChC,YAAY,EAAEC,SAAS;IACvB,cAAc,EAAEC,WAAW;IAC3B,MAAM,EAAEC,IAAI;IACZ,MAAM,EAAEC,IAAI;IACZ,cAAc,EAAEC,YAAY;IAC5B,MAAM,EAAEC;EACV,CAAC;;EAED;EACA,MAAMC,SAAS,GAAGT,IAAI,CAACU,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,OAAO;;EAEtD;EACA,IAAIC,QAAQ;EACZ,IAAIZ,gBAAgB,CAACa,QAAQ,CAAC,MAAM,CAAC,EAAE;IACrCD,QAAQ,GAAG,MAAM;EACnB,CAAC,MAAM,IAAIZ,gBAAgB,CAACa,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC5CD,QAAQ,GAAG,MAAM;EACnB,CAAC,MAAM,IAAIZ,gBAAgB,CAACa,QAAQ,CAAC,cAAc,CAAC,EAAE;IACpDD,QAAQ,GAAG,cAAc;EAC3B,CAAC,MAAM,IAAIZ,gBAAgB,CAACa,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC5CD,QAAQ,GAAG,MAAM;EACnB,CAAC,MAAM,IAAIZ,gBAAgB,CAACa,QAAQ,CAAC,OAAO,CAAC,EAAE;IAC7CD,QAAQ,GAAG,GAAGF,SAAS,QAAQ,CAAC,CAAC;EACnC,CAAC,MAAM;IACLE,QAAQ,GAAG,aAAaF,SAAS,EAAE;EACrC;;EAEA;EACA,MAAMI,QAAQ,GAAGZ,aAAa,CAACU,QAAQ,CAAC,IAAI,uBAAuB;EAEnE,oBACEd,OAAA;IAAOiB,QAAQ;IAACC,IAAI;IAACC,KAAK;IAACC,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBACrDrB,OAAA;MAAQsB,GAAG,EAAEN,QAAS;MAACO,IAAI,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gDAE5C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAEZ,CAAC;AAACC,EAAA,GAzCI3B,eAAe;AA2CrB,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}