{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/TemperatureGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TemperatureGraph = ({\n  violations\n}) => {\n  _s();\n  const [groupedData, setGroupedData] = useState({});\n  useEffect(() => {\n    // Group violations by location (city) and alert type\n    const grouped = violations.reduce((acc, violation) => {\n      const {\n        location,\n        alertType\n      } = violation;\n\n      // Initialize the location object if it doesn't exist\n      if (!acc[location]) {\n        acc[location] = {\n          temp: [],\n          wind: []\n        }; // Ensure temp and wind are arrays\n      }\n\n      // Push violations into the appropriate array\n      if (alertType === 'temp_above' || alertType === 'temp_below') {\n        acc[location].temp.push(violation);\n      } else if (alertType === 'wind_speed_above') {\n        acc[location].wind.push(violation);\n      }\n      return acc;\n    }, {});\n    setGroupedData(grouped);\n  }, [violations]);\n  const renderTemperatureGraphs = tempViolations => {\n    const labels = tempViolations.map(violation => new Date(violation.timestamp).toLocaleString());\n    const thresholdValues = tempViolations.map(violation => violation.thresholdValue);\n    const recordedTemperatures = tempViolations.map(violation => violation.recordedTemperature);\n    const data = {\n      labels,\n      datasets: [{\n        label: 'Threshold Temperature (째C)',\n        data: thresholdValues,\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n        fill: false,\n        tension: 0.1\n      }, {\n        label: 'Recorded Temperature (째C)',\n        data: recordedTemperatures,\n        borderColor: 'blue',\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n        fill: false,\n        tension: 0.1\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  };\n  const renderWindGraph = windViolations => {\n    const labels = windViolations.map(violation => new Date(violation.timestamp).toLocaleString());\n    const thresholdValues = windViolations.map(violation => violation.thresholdValue);\n    const recordedWindSpeeds = windViolations.map(violation => violation.recordedWindSpeed);\n    const data = {\n      labels,\n      datasets: [{\n        label: 'Threshold Wind Speed (m/s)',\n        data: thresholdValues,\n        borderColor: 'orange',\n        backgroundColor: 'rgba(255, 159, 64, 0.2)',\n        fill: false,\n        tension: 0.1\n      }, {\n        label: 'Recorded Wind Speed (m/s)',\n        data: recordedWindSpeeds,\n        borderColor: 'green',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        fill: false,\n        tension: 0.1\n      }]\n    };\n    return /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  };\n  const renderGraphs = () => {\n    return Object.keys(groupedData).map(location => {\n      const cityData = groupedData[location];\n      const tempViolations = cityData.temp || [];\n      const windViolations = cityData.wind || [];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '40px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold mb-4\",\n          children: [location, \" Temperature Violations\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), tempViolations.length > 0 ? renderTemperatureGraphs(tempViolations) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No temperature violations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 82\n        }, this), windViolations.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl font-bold mt-6 mb-4\",\n            children: [location, \" Wind Speed Violations\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), renderWindGraph(windViolations)]\n        }, void 0, true)]\n      }, location, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.keys(groupedData).length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No temperature violations to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : renderGraphs()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureGraph, \"XGjZ0L7muXjrZG3JkJ2mGvbi6AI=\");\n_c = TemperatureGraph;\nexport default TemperatureGraph;\nvar _c;\n$RefreshReg$(_c, \"TemperatureGraph\");","map":{"version":3,"names":["React","useEffect","useState","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","TemperatureGraph","violations","_s","groupedData","setGroupedData","grouped","reduce","acc","violation","location","alertType","temp","wind","push","renderTemperatureGraphs","tempViolations","labels","map","Date","timestamp","toLocaleString","thresholdValues","thresholdValue","recordedTemperatures","recordedTemperature","data","datasets","label","borderColor","backgroundColor","fill","tension","fileName","_jsxFileName","lineNumber","columnNumber","renderWindGraph","windViolations","recordedWindSpeeds","recordedWindSpeed","renderGraphs","Object","keys","cityData","style","marginBottom","children","className","length","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/TemperatureGraph.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\n\nconst TemperatureGraph = ({ violations }) => {\n  const [groupedData, setGroupedData] = useState({});\n\n  useEffect(() => {\n    // Group violations by location (city) and alert type\n    const grouped = violations.reduce((acc, violation) => {\n      const { location, alertType } = violation;\n\n      // Initialize the location object if it doesn't exist\n      if (!acc[location]) {\n        acc[location] = { temp: [], wind: [] }; // Ensure temp and wind are arrays\n      }\n\n      // Push violations into the appropriate array\n      if (alertType === 'temp_above' || alertType === 'temp_below') {\n        acc[location].temp.push(violation);\n      } else if (alertType === 'wind_speed_above') {\n        acc[location].wind.push(violation);\n      }\n\n      return acc;\n    }, {});\n\n    setGroupedData(grouped);\n  }, [violations]);\n\n  const renderTemperatureGraphs = (tempViolations) => {\n    const labels = tempViolations.map(violation => \n      new Date(violation.timestamp).toLocaleString()\n    );\n\n    const thresholdValues = tempViolations.map(violation => violation.thresholdValue);\n    const recordedTemperatures = tempViolations.map(violation => violation.recordedTemperature);\n\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'Threshold Temperature (째C)',\n          data: thresholdValues,\n          borderColor: 'red',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          fill: false,\n          tension: 0.1,\n        },\n        {\n          label: 'Recorded Temperature (째C)',\n          data: recordedTemperatures,\n          borderColor: 'blue',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          fill: false,\n          tension: 0.1,\n        }\n      ]\n    };\n\n    return <Line data={data} />;\n  };\n\n  const renderWindGraph = (windViolations) => {\n    const labels = windViolations.map(violation => \n      new Date(violation.timestamp).toLocaleString()\n    );\n\n    const thresholdValues = windViolations.map(violation => violation.thresholdValue);\n    const recordedWindSpeeds = windViolations.map(violation => violation.recordedWindSpeed);\n\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'Threshold Wind Speed (m/s)',\n          data: thresholdValues,\n          borderColor: 'orange',\n          backgroundColor: 'rgba(255, 159, 64, 0.2)',\n          fill: false,\n          tension: 0.1,\n        },\n        {\n          label: 'Recorded Wind Speed (m/s)',\n          data: recordedWindSpeeds,\n          borderColor: 'green',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: false,\n          tension: 0.1,\n        }\n      ]\n    };\n\n    return <Line data={data} />;\n  };\n\n  const renderGraphs = () => {\n    return Object.keys(groupedData).map((location) => {\n      const cityData = groupedData[location];\n      const tempViolations = cityData.temp || [];\n      const windViolations = cityData.wind || [];\n\n      return (\n        <div key={location} style={{ marginBottom: '40px' }}>\n          <h3 className=\"text-xl font-bold mb-4\">{location} Temperature Violations</h3>\n          {tempViolations.length > 0 ? renderTemperatureGraphs(tempViolations) : <p>No temperature violations</p>}\n          \n          {windViolations.length > 0 && (\n            <>\n              <h3 className=\"text-xl font-bold mt-6 mb-4\">{location} Wind Speed Violations</h3>\n              {renderWindGraph(windViolations)}\n            </>\n          )}\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div>\n      {Object.keys(groupedData).length === 0 ? (\n        <div>No temperature violations to display.</div>\n      ) : (\n        renderGraphs()\n      )}\n    </div>\n  );\n};\n\nexport default TemperatureGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}