{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/WeatherAlert.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherAlerts = () => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Check if the user is logged in by verifying the JWT token\n    const token = localStorage.getItem('token');\n    if (!token) {\n      navigate('/login'); // Redirect to the login page if not logged in\n    } else {\n      // Here you can decode the token or fetch user details from the backend if needed\n      // For simplicity, we’ll assume the token contains user information\n      // For example, you might decode it with a library like jwt-decode\n      const userData = JSON.parse(atob(token.split('.')[1])); // Decode JWT token payload\n      setUser(userData);\n    }\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weather Alerts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), user ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Welcome, \", user.user.username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this) // Display the logged-in user's username\n    : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this) // You could also show a loading state while checking\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherAlerts, \"7CTApz3LMzC8LG1QZqzjZq1hx+k=\", false, function () {\n  return [useNavigate];\n});\n_c = WeatherAlerts;\nexport default WeatherAlerts;\nvar _c;\n$RefreshReg$(_c, \"WeatherAlerts\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","WeatherAlerts","_s","navigate","user","setUser","token","localStorage","getItem","userData","JSON","parse","atob","split","children","fileName","_jsxFileName","lineNumber","columnNumber","username","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/WeatherAlert.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst WeatherAlerts = () => {\n    const navigate = useNavigate();\n    const [user, setUser] = useState(null);\n\n    useEffect(() => {\n        // Check if the user is logged in by verifying the JWT token\n        const token = localStorage.getItem('token');\n        if (!token) {\n            navigate('/login'); // Redirect to the login page if not logged in\n        } else {\n            // Here you can decode the token or fetch user details from the backend if needed\n            // For simplicity, we’ll assume the token contains user information\n            // For example, you might decode it with a library like jwt-decode\n            const userData = JSON.parse(atob(token.split('.')[1])); // Decode JWT token payload\n            setUser(userData);\n        }\n    }, [navigate]);\n\n    return (\n        <div>\n            <h2>Weather Alerts</h2>\n            {user ? (\n                <h3>Welcome, {user.user.username}!</h3> // Display the logged-in user's username\n            ) : (\n                <h3>Loading...</h3> // You could also show a loading state while checking\n            )}\n        </div>\n    );\n};\n\nexport default WeatherAlerts;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACRH,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxB,CAAC,MAAM;MACH;MACA;MACA;MACA,MAAMM,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxDR,OAAO,CAACI,QAAQ,CAAC;IACrB;EACJ,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,oBACIH,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBd,IAAI,gBACDJ,OAAA;MAAAc,QAAA,GAAI,WAAS,EAACV,IAAI,CAACA,IAAI,CAACe,QAAQ,EAAC,GAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC;IAAA,eAExClB,OAAA;MAAAc,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,CAAC;IACvB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAChB,EAAA,CA5BID,aAAa;EAAA,QACEH,WAAW;AAAA;AAAAsB,EAAA,GAD1BnB,aAAa;AA8BnB,eAAeA,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}