{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/src/components/HourlyForecast.jsx\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HourlyForecast = ({\n  data\n}) => {\n  const hourlyData = data.list.slice(0, 8).map(item => ({\n    time: new Date(item.dt * 1000).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    }),\n    temperature: Math.round(item.main.temp),\n    description: item.weather[0].description,\n    icon: item.weather[0].icon\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-3xl p-8 shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-6 text-gray-800\",\n      children: \"24-Hour Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: hourlyData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\",\n          stroke: \"#e0e0e0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"time\",\n          stroke: \"#718096\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          stroke: \"#718096\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"temperature\",\n          stroke: \"#4299e1\",\n          strokeWidth: 2,\n          dot: {\n            r: 4\n          },\n          activeDot: {\n            r: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 grid grid-cols-4 sm:grid-cols-8 gap-4\",\n      children: hourlyData.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: item.time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/wn/${item.icon}.png`,\n          alt: item.description,\n          className: \"w-8 h-8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm font-semibold text-gray-800\",\n          children: [item.temperature, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = HourlyForecast;\nconst CustomTooltip = ({\n  active,\n  payload,\n  label\n}) => {\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border border-gray-200 p-4 rounded shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold text-gray-800\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-blue-500\",\n        children: `Temperature: ${payload[0].value}°C`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: payload[0].payload.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n  return null;\n};\n_c2 = CustomTooltip;\nexport default HourlyForecast;\nvar _c, _c2;\n$RefreshReg$(_c, \"HourlyForecast\");\n$RefreshReg$(_c2, \"CustomTooltip\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","HourlyForecast","data","hourlyData","list","slice","map","item","time","Date","dt","toLocaleTimeString","hour","minute","temperature","Math","round","main","temp","description","weather","icon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","stroke","dataKey","content","CustomTooltip","type","strokeWidth","dot","r","activeDot","index","src","alt","_c","active","payload","label","length","value","_c2","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/src/components/HourlyForecast.jsx"],"sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst HourlyForecast = ({ data }) => {\n  const hourlyData = data.list.slice(0, 8).map(item => ({\n    time: new Date(item.dt * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n    temperature: Math.round(item.main.temp),\n    description: item.weather[0].description,\n    icon: item.weather[0].icon\n  }));\n\n  return (\n    <div className=\"bg-white rounded-3xl p-8 shadow-lg\">\n      <h2 className=\"text-3xl font-bold mb-6 text-gray-800\">24-Hour Forecast</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart data={hourlyData}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e0e0e0\" />\n          <XAxis dataKey=\"time\" stroke=\"#718096\" />\n          <YAxis stroke=\"#718096\" />\n          <Tooltip content={<CustomTooltip />} />\n          <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#4299e1\" strokeWidth={2} dot={{ r: 4 }} activeDot={{ r: 8 }} />\n        </LineChart>\n      </ResponsiveContainer>\n      <div className=\"mt-6 grid grid-cols-4 sm:grid-cols-8 gap-4\">\n        {hourlyData.map((item, index) => (\n          <div key={index} className=\"flex flex-col items-center\">\n            <p className=\"text-sm text-gray-600\">{item.time}</p>\n            <img\n              src={`http://openweathermap.org/img/wn/${item.icon}.png`}\n              alt={item.description}\n              className=\"w-8 h-8\"\n            />\n            <p className=\"text-sm font-semibold text-gray-800\">{item.temperature}°C</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white border border-gray-200 p-4 rounded shadow-md\">\n        <p className=\"font-semibold text-gray-800\">{label}</p>\n        <p className=\"text-blue-500\">{`Temperature: ${payload[0].value}°C`}</p>\n        <p className=\"text-gray-600\">{payload[0].payload.description}</p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default HourlyForecast;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}