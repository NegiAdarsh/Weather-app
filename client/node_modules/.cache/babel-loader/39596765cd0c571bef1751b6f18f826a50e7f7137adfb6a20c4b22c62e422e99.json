{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Search } from 'lucide-react';\nimport CurrentWeather from './components/CurrentWeather';\nimport Highlights from './components/Highlights';\nimport WeeklyForecast from './components/WeeklyForecast';\nimport HourlyForecast from './components/HourlyForecast';\nimport BackgroundVideo from './components/BackgroundVideo';\nimport Auth from './components/Auth';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'e4ba4b05eee9251d041f4745a2222fce';\nconst API_BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst BACKEND_URL = 'http://localhost:3001'; // Your backend URL\n\nconst suggestedCities = ['Delhi', 'Mumbai', 'Chennai', 'Bangalore', 'Kolkata', 'Hyderabad'];\nfunction App() {\n  _s();\n  // Existing states\n  const [searchInput, setSearchInput] = useState('');\n  const [activeCity, setActiveCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [unit, setUnit] = useState('metric');\n  const [intervalId, setIntervalId] = useState(null);\n\n  // New authentication states\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState('');\n  const [userId, setUserId] = useState(null);\n\n  // Handle successful login\n  const handleLoginSuccess = (token, user) => {\n    setIsAuthenticated(true);\n    setAuthToken(token);\n    setUserId(user.id);\n    localStorage.setItem('token', token);\n    localStorage.setItem('userId', user.id);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setAuthToken('');\n    setUserId(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    // Clear weather data\n    setWeatherData(null);\n    setForecast(null);\n    setActiveCity('');\n  };\n\n  // Check for existing auth token on component mount\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUserId = localStorage.getItem('userId');\n    if (token && storedUserId) {\n      // Verify token with backend\n      fetch(`${BACKEND_URL}/api/verify-token`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      }).then(response => {\n        if (response.ok) {\n          setIsAuthenticated(true);\n          setAuthToken(token);\n          setUserId(storedUserId);\n        } else {\n          handleLogout();\n        }\n      }).catch(() => handleLogout());\n    }\n  }, []);\n\n  // Modified fetchWeatherData to include authentication\n  const fetchWeatherData = useCallback(async (cityName, tempUnit) => {\n    if (!cityName || !isAuthenticated) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const unitParam = tempUnit === 'metric' ? `&units=metric` : '';\n      const weatherUrl = `${API_BASE_URL}/weather?q=${cityName}${unitParam}&appid=${API_KEY}`;\n      const forecastUrl = `${API_BASE_URL}/forecast?q=${cityName}${unitParam}&appid=${API_KEY}`;\n      const [weatherResponse, forecastResponse] = await Promise.all([fetch(weatherUrl), fetch(forecastUrl)]);\n      if (!weatherResponse.ok || !forecastResponse.ok) {\n        throw new Error('City not found or data unavailable');\n      }\n      const [weather, forecast] = await Promise.all([weatherResponse.json(), forecastResponse.json()]);\n\n      // Save search history to backend\n      await fetch(`${BACKEND_URL}/api/search-history`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          userId,\n          cityName,\n          timestamp: new Date().toISOString()\n        })\n      });\n      setWeatherData(weather);\n      setForecast(forecast);\n      setActiveCity(cityName);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [isAuthenticated, authToken, userId]);\n\n  // Rest of your existing functions...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(Auth, {\n      onLoginSuccess: handleLoginSuccess,\n      backendUrl: BACKEND_URL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [weatherData && /*#__PURE__*/_jsxDEV(BackgroundVideo, {\n        weatherCondition: weatherData.weather[0].description,\n        icon: weatherData.weather[0].icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between items-center mb-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-4xl font-bold text-gray-800\",\n              children: \"Weather Forecast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleLogout,\n              className: \"px-4 py-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition duration-300\",\n              children: \"Logout\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OKJrc2kMI2OXFitmxzEClakI0SU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Search","CurrentWeather","Highlights","WeeklyForecast","HourlyForecast","BackgroundVideo","Auth","jsxDEV","_jsxDEV","Fragment","_Fragment","API_KEY","API_BASE_URL","BACKEND_URL","suggestedCities","App","_s","searchInput","setSearchInput","activeCity","setActiveCity","weatherData","setWeatherData","forecast","setForecast","loading","setLoading","error","setError","unit","setUnit","intervalId","setIntervalId","isAuthenticated","setIsAuthenticated","authToken","setAuthToken","userId","setUserId","handleLoginSuccess","token","user","id","localStorage","setItem","handleLogout","removeItem","getItem","storedUserId","fetch","headers","then","response","ok","catch","fetchWeatherData","cityName","tempUnit","unitParam","weatherUrl","forecastUrl","weatherResponse","forecastResponse","Promise","all","Error","weather","json","method","body","JSON","stringify","timestamp","Date","toISOString","err","message","className","children","onLoginSuccess","backendUrl","fileName","_jsxFileName","lineNumber","columnNumber","weatherCondition","description","icon","onClick","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Search } from 'lucide-react';\nimport CurrentWeather from './components/CurrentWeather';\nimport Highlights from './components/Highlights';\nimport WeeklyForecast from './components/WeeklyForecast';\nimport HourlyForecast from './components/HourlyForecast';\nimport BackgroundVideo from './components/BackgroundVideo';\nimport Auth from './components/Auth';\nimport './App.css';\n\nconst API_KEY = 'e4ba4b05eee9251d041f4745a2222fce';\nconst API_BASE_URL = 'https://api.openweathermap.org/data/2.5';\nconst BACKEND_URL = 'http://localhost:3001'; // Your backend URL\n\nconst suggestedCities = ['Delhi', 'Mumbai', 'Chennai', 'Bangalore', 'Kolkata', 'Hyderabad'];\n\nfunction App() {\n  // Existing states\n  const [searchInput, setSearchInput] = useState('');\n  const [activeCity, setActiveCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [unit, setUnit] = useState('metric');\n  const [intervalId, setIntervalId] = useState(null);\n  \n  // New authentication states\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authToken, setAuthToken] = useState('');\n  const [userId, setUserId] = useState(null);\n\n  // Handle successful login\n  const handleLoginSuccess = (token, user) => {\n    setIsAuthenticated(true);\n    setAuthToken(token);\n    setUserId(user.id);\n    localStorage.setItem('token', token);\n    localStorage.setItem('userId', user.id);\n  };\n\n  // Handle logout\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setAuthToken('');\n    setUserId(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    // Clear weather data\n    setWeatherData(null);\n    setForecast(null);\n    setActiveCity('');\n  };\n\n  // Check for existing auth token on component mount\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUserId = localStorage.getItem('userId');\n    if (token && storedUserId) {\n      // Verify token with backend\n      fetch(`${BACKEND_URL}/api/verify-token`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n      .then(response => {\n        if (response.ok) {\n          setIsAuthenticated(true);\n          setAuthToken(token);\n          setUserId(storedUserId);\n        } else {\n          handleLogout();\n        }\n      })\n      .catch(() => handleLogout());\n    }\n  }, []);\n\n  // Modified fetchWeatherData to include authentication\n  const fetchWeatherData = useCallback(async (cityName, tempUnit) => {\n    if (!cityName || !isAuthenticated) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const unitParam = tempUnit === 'metric' ? `&units=metric` : '';\n      const weatherUrl = `${API_BASE_URL}/weather?q=${cityName}${unitParam}&appid=${API_KEY}`;\n      const forecastUrl = `${API_BASE_URL}/forecast?q=${cityName}${unitParam}&appid=${API_KEY}`;\n\n      const [weatherResponse, forecastResponse] = await Promise.all([\n        fetch(weatherUrl),\n        fetch(forecastUrl)\n      ]);\n\n      if (!weatherResponse.ok || !forecastResponse.ok) {\n        throw new Error('City not found or data unavailable');\n      }\n\n      const [weather, forecast] = await Promise.all([\n        weatherResponse.json(),\n        forecastResponse.json()\n      ]);\n\n      // Save search history to backend\n      await fetch(`${BACKEND_URL}/api/search-history`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          userId,\n          cityName,\n          timestamp: new Date().toISOString()\n        })\n      });\n\n      setWeatherData(weather);\n      setForecast(forecast);\n      setActiveCity(cityName);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [isAuthenticated, authToken, userId]);\n\n  // Rest of your existing functions...\n\n  return (\n    <div className=\"app-container\">\n      {!isAuthenticated ? (\n        <Auth onLoginSuccess={handleLoginSuccess} backendUrl={BACKEND_URL} />\n      ) : (\n        <>\n          {weatherData && (\n            <BackgroundVideo\n              weatherCondition={weatherData.weather[0].description}\n              icon={weatherData.weather[0].icon}\n            />\n          )}\n          \n          <div className=\"content-container\">\n            <div className=\"weather-card\">\n              <div className=\"flex justify-between items-center mb-8\">\n                <h1 className=\"text-4xl font-bold text-gray-800\">\n                  Weather Forecast\n                </h1>\n                <button\n                  onClick={handleLogout}\n                  className=\"px-4 py-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition duration-300\"\n                >\n                  Logout\n                </button>\n              </div>\n\n              {/* Rest of your existing JSX... */}\n              {/* Keep all your existing components and UI elements */}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}