{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/src/components/WeatherImage.jsx\";\nimport React from 'react';\nimport clearSkyDay from '../videos/weather/clear_sky_day.mp4';\nimport clearSkyNight from '../videos/weather/clear_sky_night.mp4';\nimport cloudyDay from '../videos/weather/cloudy_sky_day.mp4';\nimport cloudyNight from '../videos/weather/cloudy_sky_night.mp4';\nimport rain from '../videos/weather/rain.mp4';\nimport snow from '../videos/weather/snow.mp4';\n\n// A component that takes weather description and icon to render the appropriate video\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackgroundVideo = ({\n  description,\n  icon\n}) => {\n  // Mapping of weather conditions to videos\n  const weatherVideos = {\n    'clear sky day': clearSkyDay,\n    'clear sky night': clearSkyNight,\n    'clouds day': cloudyDay,\n    'clouds night': cloudyNight,\n    'rain': rain,\n    'snow': snow\n  };\n\n  // Determine if it's day or night\n  const timeOfDay = icon.endsWith('d') ? 'day' : 'night';\n\n  // Create the key for matching with weatherVideos\n  let videoKey;\n  if (description.includes('rain')) {\n    videoKey = 'rain';\n  } else if (description.includes('snow')) {\n    videoKey = 'snow';\n  } else if (description.includes('clouds') && !description.includes('day') && !description.includes('night')) {\n    videoKey = 'clouds';\n  } else {\n    videoKey = `${description.toLowerCase()} ${timeOfDay}`;\n  }\n\n  // Fetch the video or return null if no match is found\n  const videoUrl = weatherVideos[videoKey] || null;\n  if (!videoUrl) return null; // Don't render video if no matching condition\n\n  return /*#__PURE__*/_jsxDEV(\"video\", {\n    autoPlay: true,\n    loop: true,\n    muted: true,\n    className: \"background-video\",\n    children: [/*#__PURE__*/_jsxDEV(\"source\", {\n      src: videoUrl,\n      type: \"video/mp4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), \"Your browser does not support the video tag.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = BackgroundVideo;\nexport default BackgroundVideo;\nvar _c;\n$RefreshReg$(_c, \"BackgroundVideo\");","map":{"version":3,"names":["React","clearSkyDay","clearSkyNight","cloudyDay","cloudyNight","rain","snow","jsxDEV","_jsxDEV","BackgroundVideo","description","icon","weatherVideos","timeOfDay","endsWith","videoKey","includes","toLowerCase","videoUrl","autoPlay","loop","muted","className","children","src","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/src/components/WeatherImage.jsx"],"sourcesContent":["import React from 'react';\nimport clearSkyDay from '../videos/weather/clear_sky_day.mp4';\nimport clearSkyNight from '../videos/weather/clear_sky_night.mp4';\nimport cloudyDay from '../videos/weather/cloudy_sky_day.mp4';\nimport cloudyNight from '../videos/weather/cloudy_sky_night.mp4';\nimport rain from '../videos/weather/rain.mp4';\nimport snow from '../videos/weather/snow.mp4';\n\n// A component that takes weather description and icon to render the appropriate video\nconst BackgroundVideo = ({ description, icon }) => {\n  // Mapping of weather conditions to videos\n  const weatherVideos = {\n    'clear sky day': clearSkyDay,\n    'clear sky night': clearSkyNight,\n    'clouds day': cloudyDay,\n    'clouds night': cloudyNight,\n    'rain': rain,\n    'snow': snow,\n  };\n\n  // Determine if it's day or night\n  const timeOfDay = icon.endsWith('d') ? 'day' : 'night';\n  \n  // Create the key for matching with weatherVideos\n  let videoKey;\n  if (description.includes('rain')) {\n    videoKey = 'rain';\n  } else if (description.includes('snow')) {\n    videoKey = 'snow';\n  } else if (description.includes('clouds') && !description.includes('day') && !description.includes('night')) {\n    videoKey = 'clouds';\n  } else {\n    videoKey = `${description.toLowerCase()} ${timeOfDay}`;\n  }\n\n  // Fetch the video or return null if no match is found\n  const videoUrl = weatherVideos[videoKey] || null;\n\n  if (!videoUrl) return null; // Don't render video if no matching condition\n\n  return (\n    <video autoPlay loop muted className=\"background-video\">\n      <source src={videoUrl} type=\"video/mp4\" />\n      Your browser does not support the video tag.\n    </video>\n  );\n};\n\nexport default BackgroundVideo;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,aAAa,MAAM,uCAAuC;AACjE,OAAOC,SAAS,MAAM,sCAAsC;AAC5D,OAAOC,WAAW,MAAM,wCAAwC;AAChE,OAAOC,IAAI,MAAM,4BAA4B;AAC7C,OAAOC,IAAI,MAAM,4BAA4B;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAK,CAAC,KAAK;EACjD;EACA,MAAMC,aAAa,GAAG;IACpB,eAAe,EAAEX,WAAW;IAC5B,iBAAiB,EAAEC,aAAa;IAChC,YAAY,EAAEC,SAAS;IACvB,cAAc,EAAEC,WAAW;IAC3B,MAAM,EAAEC,IAAI;IACZ,MAAM,EAAEC;EACV,CAAC;;EAED;EACA,MAAMO,SAAS,GAAGF,IAAI,CAACG,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,OAAO;;EAEtD;EACA,IAAIC,QAAQ;EACZ,IAAIL,WAAW,CAACM,QAAQ,CAAC,MAAM,CAAC,EAAE;IAChCD,QAAQ,GAAG,MAAM;EACnB,CAAC,MAAM,IAAIL,WAAW,CAACM,QAAQ,CAAC,MAAM,CAAC,EAAE;IACvCD,QAAQ,GAAG,MAAM;EACnB,CAAC,MAAM,IAAIL,WAAW,CAACM,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAACN,WAAW,CAACM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAACN,WAAW,CAACM,QAAQ,CAAC,OAAO,CAAC,EAAE;IAC3GD,QAAQ,GAAG,QAAQ;EACrB,CAAC,MAAM;IACLA,QAAQ,GAAG,GAAGL,WAAW,CAACO,WAAW,CAAC,CAAC,IAAIJ,SAAS,EAAE;EACxD;;EAEA;EACA,MAAMK,QAAQ,GAAGN,aAAa,CAACG,QAAQ,CAAC,IAAI,IAAI;EAEhD,IAAI,CAACG,QAAQ,EAAE,OAAO,IAAI,CAAC,CAAC;;EAE5B,oBACEV,OAAA;IAAOW,QAAQ;IAACC,IAAI;IAACC,KAAK;IAACC,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBACrDf,OAAA;MAAQgB,GAAG,EAAEN,QAAS;MAACO,IAAI,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gDAE5C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAEZ,CAAC;AAACC,EAAA,GArCIrB,eAAe;AAuCrB,eAAeA,eAAe;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}