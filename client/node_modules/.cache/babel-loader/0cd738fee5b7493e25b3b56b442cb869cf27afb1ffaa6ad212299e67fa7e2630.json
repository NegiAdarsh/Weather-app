{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/WeatherImage.jsx\";\nimport React from 'react';\nimport clearSkyDay from '../images/weather/clear_sky_day.png';\nimport clearSkyNight from '../images/weather/clear_sky_night.png';\nimport cloudyDay from '../images/weather/cloudy_sky_day.png';\nimport cloudyNight from '../images/weather/cloud_sky_night.png';\nimport rain from '../images/weather/rain_day.png';\nimport snow from '../images/weather/snow.png';\nimport cloud from '../images/weather/cloud.png';\n\n// A component that takes weather description and icon to render the appropriate image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherImage = ({\n  description,\n  icon\n}) => {\n  // Mapping of weather conditions to images\n  const weatherImages = {\n    'clear sky day': clearSkyDay,\n    'clear sky night': clearSkyNight,\n    'clouds day': cloudyDay,\n    'clouds night': cloudyNight,\n    'cloud': cloud,\n    'rain': rain,\n    'snow': snow\n  };\n\n  // Determine if it's day or night\n  const timeOfDay = icon.endsWith('d') ? 'day' : 'night';\n\n  // Create the key for matching with weatherImages\n  let weatherKey;\n  if (description.includes('rain')) {\n    weatherKey = 'rain';\n  } else if (description.includes('snow')) {\n    weatherKey = 'snow';\n  } else if (description.includes('clouds') && (!description.includes('day') || !description.includes('night'))) {\n    weatherKey = 'cloud';\n  } else {\n    weatherKey = `${description.toLowerCase()} ${timeOfDay}`;\n  }\n\n  // Fetch the image or fallback to OpenWeather default image\n  const imageUrl = weatherImages[weatherKey] || `http://openweathermap.org/img/wn/${icon}@2x.png`;\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: imageUrl,\n    alt: weatherKey,\n    className: \"w-16 h-16\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = WeatherImage;\nexport default WeatherImage;\nvar _c;\n$RefreshReg$(_c, \"WeatherImage\");","map":{"version":3,"names":["React","clearSkyDay","clearSkyNight","cloudyDay","cloudyNight","rain","snow","cloud","jsxDEV","_jsxDEV","WeatherImage","description","icon","weatherImages","timeOfDay","endsWith","weatherKey","includes","toLowerCase","imageUrl","src","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/WeatherImage.jsx"],"sourcesContent":["import React from 'react';\nimport clearSkyDay from '../images/weather/clear_sky_day.png';\nimport clearSkyNight from '../images/weather/clear_sky_night.png';\nimport cloudyDay from '../images/weather/cloudy_sky_day.png';\nimport cloudyNight from '../images/weather/cloud_sky_night.png';\nimport rain from '../images/weather/rain_day.png';\nimport snow from '../images/weather/snow.png';\nimport cloud from '../images/weather/cloud.png';\n\n// A component that takes weather description and icon to render the appropriate image\nconst WeatherImage = ({ description, icon }) => {\n  // Mapping of weather conditions to images\n  const weatherImages = {\n    'clear sky day': clearSkyDay,\n    'clear sky night': clearSkyNight,\n    'clouds day': cloudyDay,\n    'clouds night': cloudyNight,\n    'cloud' : cloud,\n    'rain': rain,\n    'snow': snow,\n  };\n\n  // Determine if it's day or night\n  const timeOfDay = icon.endsWith('d') ? 'day' : 'night';\n  \n  // Create the key for matching with weatherImages\n  let weatherKey;\n  if (description.includes('rain')) {\n    weatherKey = 'rain';\n  } else if (description.includes('snow')) {\n    weatherKey = 'snow';\n  } \n  else if(description.includes('clouds') && (!description.includes('day') || !description.includes('night')))\n    {\n        weatherKey ='cloud';\n    }\n  else {\n    weatherKey = `${description.toLowerCase()} ${timeOfDay}`;\n  }\n\n  // Fetch the image or fallback to OpenWeather default image\n  const imageUrl = weatherImages[weatherKey] || `http://openweathermap.org/img/wn/${icon}@2x.png`;\n\n  return (\n    <img\n      src={imageUrl}\n      alt={weatherKey}\n      className=\"w-16 h-16\"\n    />\n  );\n};\n\nexport default WeatherImage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,aAAa,MAAM,uCAAuC;AACjE,OAAOC,SAAS,MAAM,sCAAsC;AAC5D,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,OAAOC,IAAI,MAAM,gCAAgC;AACjD,OAAOC,IAAI,MAAM,4BAA4B;AAC7C,OAAOC,KAAK,MAAM,6BAA6B;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAK,CAAC,KAAK;EAC9C;EACA,MAAMC,aAAa,GAAG;IACpB,eAAe,EAAEZ,WAAW;IAC5B,iBAAiB,EAAEC,aAAa;IAChC,YAAY,EAAEC,SAAS;IACvB,cAAc,EAAEC,WAAW;IAC3B,OAAO,EAAGG,KAAK;IACf,MAAM,EAAEF,IAAI;IACZ,MAAM,EAAEC;EACV,CAAC;;EAED;EACA,MAAMQ,SAAS,GAAGF,IAAI,CAACG,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,OAAO;;EAEtD;EACA,IAAIC,UAAU;EACd,IAAIL,WAAW,CAACM,QAAQ,CAAC,MAAM,CAAC,EAAE;IAChCD,UAAU,GAAG,MAAM;EACrB,CAAC,MAAM,IAAIL,WAAW,CAACM,QAAQ,CAAC,MAAM,CAAC,EAAE;IACvCD,UAAU,GAAG,MAAM;EACrB,CAAC,MACI,IAAGL,WAAW,CAACM,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAACN,WAAW,CAACM,QAAQ,CAAC,KAAK,CAAC,IAAI,CAACN,WAAW,CAACM,QAAQ,CAAC,OAAO,CAAC,CAAC,EACxG;IACID,UAAU,GAAE,OAAO;EACvB,CAAC,MACE;IACHA,UAAU,GAAG,GAAGL,WAAW,CAACO,WAAW,CAAC,CAAC,IAAIJ,SAAS,EAAE;EAC1D;;EAEA;EACA,MAAMK,QAAQ,GAAGN,aAAa,CAACG,UAAU,CAAC,IAAI,oCAAoCJ,IAAI,SAAS;EAE/F,oBACEH,OAAA;IACEW,GAAG,EAAED,QAAS;IACdE,GAAG,EAAEL,UAAW;IAChBM,SAAS,EAAC;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEN,CAAC;AAACC,EAAA,GAxCIjB,YAAY;AA0ClB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}