{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/WeatherStats.jsx\",\n  _s = $RefreshSig$();\n// WeatherStats.js\nimport React, { useEffect, useState } from 'react';\nimport './WeatherStats.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherStats = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState({});\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const fetchWeatherStats = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/users/stats`, {\n          method: 'GET',\n          headers: {\n            'x-auth-token': token\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch weather stats');\n        }\n        const data = await response.json();\n\n        // Group by city and date\n        const groupedData = {};\n        data.forEach(entry => {\n          const city = entry.location;\n          const date = new Date(entry.date).toDateString(); // Use `entry.timestamp` or appropriate date field\n\n          if (!groupedData[city]) {\n            groupedData[city] = {};\n          }\n          if (!groupedData[city][date]) {\n            groupedData[city][date] = entry;\n          }\n        });\n        setWeatherData(groupedData);\n      } catch (error) {\n        console.error('Error fetching weather stats:', error);\n      }\n    };\n    fetchWeatherStats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: Object.entries(weatherData).map(([city, dates]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"city-title\",\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), Object.entries(dates).map(([date, details]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-detail\",\n          children: [\"Date: \", new Date(date).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-detail\",\n          children: [\"Avg Temperature: \", details.averageTemperature, \" \\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-detail\",\n          children: [\"Max Temperature: \", details.maximumTemperature, \" \\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-detail\",\n          children: [\"Min Temperature: \", details.minimumTemperature, \" \\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"weather-detail\",\n          children: [\"Condition: \", details.dominantCondition]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)]\n      }, date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this))]\n    }, city, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStats, \"fXI0sAmj29itrxQaRZQrWhx5dGc=\");\n_c = WeatherStats;\nexport default WeatherStats;\nvar _c;\n$RefreshReg$(_c, \"WeatherStats\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WeatherStats","_s","weatherData","setWeatherData","token","localStorage","getItem","fetchWeatherStats","response","fetch","method","headers","ok","Error","data","json","groupedData","forEach","entry","city","location","date","Date","toDateString","error","console","className","children","Object","entries","map","dates","fileName","_jsxFileName","lineNumber","columnNumber","details","toLocaleDateString","averageTemperature","maximumTemperature","minimumTemperature","dominantCondition","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/WeatherStats.jsx"],"sourcesContent":["// WeatherStats.js\nimport React, { useEffect, useState } from 'react';\nimport './WeatherStats.css';\n\nconst WeatherStats = () => {\n  const [weatherData, setWeatherData] = useState({});\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const fetchWeatherStats = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/api/users/stats`, {\n            method: 'GET',\n            headers: {\n                'x-auth-token': token\n            }\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch weather stats');\n        }\n\n        const data = await response.json();\n        \n        // Group by city and date\n        const groupedData = {};\n        data.forEach(entry => {\n          const city = entry.location;\n          const date = new Date(entry.date).toDateString(); // Use `entry.timestamp` or appropriate date field\n\n          if (!groupedData[city]) {\n            groupedData[city] = {};\n          }\n\n          if (!groupedData[city][date]) {\n            groupedData[city][date] = entry;\n          }\n        });\n\n        setWeatherData(groupedData);\n      } catch (error) {\n        console.error('Error fetching weather stats:', error);\n      }\n    };\n\n    fetchWeatherStats();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      {Object.entries(weatherData).map(([city, dates]) => (\n        <div className=\"city-section\" key={city}>\n          <h2 className=\"city-title\">{city}</h2>\n          {Object.entries(dates).map(([date, details]) => (\n            <div className=\"weather-card\" key={date}>\n              <p className=\"weather-detail\">Date: {new Date(date).toLocaleDateString()}</p>\n              <p className=\"weather-detail\">Avg Temperature: {details.averageTemperature} °C</p>\n              <p className=\"weather-detail\">Max Temperature: {details.maximumTemperature} °C</p>\n              <p className=\"weather-detail\">Min Temperature: {details.minimumTemperature} °C</p>\n              <p className=\"weather-detail\">Condition: {details.dominantCondition}</p>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default WeatherStats;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UAClEC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACL,cAAc,EAAEP;UACpB;QACJ,CAAC,CAAC;QAEF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;QAClD;QAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,WAAW,GAAG,CAAC,CAAC;QACtBF,IAAI,CAACG,OAAO,CAACC,KAAK,IAAI;UACpB,MAAMC,IAAI,GAAGD,KAAK,CAACE,QAAQ;UAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACJ,KAAK,CAACG,IAAI,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC,CAAC;;UAElD,IAAI,CAACP,WAAW,CAACG,IAAI,CAAC,EAAE;YACtBH,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC;UACxB;UAEA,IAAI,CAACH,WAAW,CAACG,IAAI,CAAC,CAACE,IAAI,CAAC,EAAE;YAC5BL,WAAW,CAACG,IAAI,CAAC,CAACE,IAAI,CAAC,GAAGH,KAAK;UACjC;QACF,CAAC,CAAC;QAEFf,cAAc,CAACa,WAAW,CAAC;MAC7B,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDjB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAK2B,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBC,MAAM,CAACC,OAAO,CAAC3B,WAAW,CAAC,CAAC4B,GAAG,CAAC,CAAC,CAACX,IAAI,EAAEY,KAAK,CAAC,kBAC7ChC,OAAA;MAAK2B,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B5B,OAAA;QAAI2B,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAER;MAAI;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACrCP,MAAM,CAACC,OAAO,CAACE,KAAK,CAAC,CAACD,GAAG,CAAC,CAAC,CAACT,IAAI,EAAEe,OAAO,CAAC,kBACzCrC,OAAA;QAAK2B,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B5B,OAAA;UAAG2B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAAC,QAAM,EAAC,IAAIL,IAAI,CAACD,IAAI,CAAC,CAACgB,kBAAkB,CAAC,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7EpC,OAAA;UAAG2B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAAC,mBAAiB,EAACS,OAAO,CAACE,kBAAkB,EAAC,QAAG;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAClFpC,OAAA;UAAG2B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAAC,mBAAiB,EAACS,OAAO,CAACG,kBAAkB,EAAC,QAAG;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAClFpC,OAAA;UAAG2B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAAC,mBAAiB,EAACS,OAAO,CAACI,kBAAkB,EAAC,QAAG;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAClFpC,OAAA;UAAG2B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAAC,aAAW,EAACS,OAAO,CAACK,iBAAiB;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GALvCd,IAAI;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMlC,CACN,CAAC;IAAA,GAV+BhB,IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWlC,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClC,EAAA,CA9DID,YAAY;AAAA0C,EAAA,GAAZ1C,YAAY;AAgElB,eAAeA,YAAY;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}