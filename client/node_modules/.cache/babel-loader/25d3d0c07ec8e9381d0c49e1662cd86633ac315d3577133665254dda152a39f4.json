{"ast":null,"code":"var _jsxFileName = \"/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/TemperatureGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureGraph = () => {\n  _s();\n  const [violationData, setViolationData] = useState([]);\n  useEffect(() => {\n    // Fetch the violation data from the backend using fetch\n    const fetchViolations = async () => {\n      try {\n        const response = await fetch('/violations', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n        setViolationData(data);\n      } catch (error) {\n        console.error('Error fetching violation data:', error);\n      }\n    };\n    fetchViolations();\n  }, []);\n\n  // Extract data for the chart\n  const timestamps = violationData.map(violation => new Date(violation.timestamp).toLocaleString());\n  const thresholdValues = violationData.map(violation => violation.thresholdValue);\n  const recordedTemps = violationData.map(violation => violation.recordedTemperature);\n\n  // Chart.js data configuration\n  const data = {\n    labels: timestamps,\n    // X-axis labels (timestamps)\n    datasets: [{\n      label: 'Threshold Temperature',\n      data: thresholdValues,\n      // Y-axis data for the threshold\n      fill: false,\n      borderColor: 'red',\n      tension: 0.1\n    }, {\n      label: 'Recorded Temperature',\n      data: recordedTemps,\n      // Y-axis data for recorded temperature\n      fill: false,\n      borderColor: 'blue',\n      tension: 0.1\n    }]\n  };\n\n  // Chart.js options for appearance and behavior\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Temperature (°C)'\n        }\n      }\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Temperature Threshold vs Recorded Temperature'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Temperature Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureGraph, \"uWFLwKaLZ3zXEQbG9Xn6wKThByg=\");\n_c = TemperatureGraph;\nexport default TemperatureGraph;\nvar _c;\n$RefreshReg$(_c, \"TemperatureGraph\");","map":{"version":3,"names":["React","useEffect","useState","Line","jsxDEV","_jsxDEV","TemperatureGraph","_s","violationData","setViolationData","fetchViolations","response","fetch","method","headers","data","json","error","console","timestamps","map","violation","Date","timestamp","toLocaleString","thresholdValues","thresholdValue","recordedTemps","recordedTemperature","labels","datasets","label","fill","borderColor","tension","options","scales","x","title","display","text","y","responsive","plugins","legend","position","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adarsh/Desktop/Main-Project/weather-app/client/src/components/TemperatureGraph.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst TemperatureGraph = () => {\n  const [violationData, setViolationData] = useState([]);\n\n  useEffect(() => {\n    // Fetch the violation data from the backend using fetch\n    const fetchViolations = async () => {\n      try {\n        const response = await fetch('/violations', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        setViolationData(data);\n      } catch (error) {\n        console.error('Error fetching violation data:', error);\n      }\n    };\n\n    fetchViolations();\n  }, []);\n\n  // Extract data for the chart\n  const timestamps = violationData.map(violation => new Date(violation.timestamp).toLocaleString());\n  const thresholdValues = violationData.map(violation => violation.thresholdValue);\n  const recordedTemps = violationData.map(violation => violation.recordedTemperature);\n\n  // Chart.js data configuration\n  const data = {\n    labels: timestamps, // X-axis labels (timestamps)\n    datasets: [\n      {\n        label: 'Threshold Temperature',\n        data: thresholdValues, // Y-axis data for the threshold\n        fill: false,\n        borderColor: 'red',\n        tension: 0.1,\n      },\n      {\n        label: 'Recorded Temperature',\n        data: recordedTemps, // Y-axis data for recorded temperature\n        fill: false,\n        borderColor: 'blue',\n        tension: 0.1,\n      },\n    ],\n  };\n\n  // Chart.js options for appearance and behavior\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time',\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Temperature (°C)',\n        },\n      },\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Temperature Threshold vs Recorded Temperature',\n      },\n    },\n  };\n\n  return (\n    <div>\n      <h2>Temperature Graph</h2>\n      <Line data={data} options={options} />\n    </div>\n  );\n};\n\nexport default TemperatureGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}